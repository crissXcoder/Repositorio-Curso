:root {
    --azul: #0071b7;
    --blanco: #FFF;
    --naranja: #ff4f1e;
}
html {
    font-size: 62.5%; /** 1REM = 10pX **/
}

body {
    background-color: var(--azul);
    font-family:  'Lato', sans-serif;
    font-size: 1.6rem;
}

.caja-curso {
    background-color: var(--naranja);
    text-align: center;
    color: var(--blanco);
    padding: 5rem;
}
.caja-curso h1 {
    margin: 0;
}
.caja-curso p {
    font-size: 2.4rem;
}
.caja-curso a {
    font-size: 2.4rem;
    padding: 2rem;
    display: inline-block;
    text-decoration: none;
    color: var(--blanco);
    padding: 0;
}

h1, h2 {
    color: var(--blanco);
    text-align: center;
    margin: 5rem 0;
}

.contenedor {
    max-width: 120rem;
    margin: 0 auto;
}
.box {
    background-color: var(--naranja);
    color: var(--blanco);
    padding: 5rem;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 4rem;
    margin-bottom: 2rem;
}

/** 1. Display Grid **/
/*
 * La propiedad 'display: grid' convierte un elemento en un contenedor grid.
 * Esto activa el sistema de layout de Grid para sus elementos hijos directos.
 * Por defecto, crea una cuadrícula de una columna, con filas que se ajustan al contenido.
 */
.grid-1 {
    display: grid;
}

/** 2. Grid Template Columns **/
/*
 * 'grid-template-columns' define el número y tamaño de las columnas en la cuadrícula.
 * Aquí se crean 3 columnas, cada una de 300px de ancho.
 * 'grid-column' es una propiedad abreviada para posicionar un elemento en la cuadrícula.
 * 'grid-column: 1 / 2' significa que el elemento ocupa desde la línea 1 hasta la 2 (una columna).
 */
.grid-2 {
    display: grid;
    grid-template-columns: 300px 300px 300px;
}
.grid-2 .box:nth-child(2) {
    grid-column-start: 1;
    grid-column-end: 2;
    grid-column: 1 / 2;
}

/** 3. Grid Template Rows **/
/*
 * 'grid-template-rows' define el número y tamaño de las filas en la cuadrícula.
 * 'repeat(3, 300px)' es una función que repite '300px' 3 veces, creando 3 columnas iguales.
 * 'grid-row' es similar a 'grid-column', pero para posicionamiento vertical.
 */
.grid-3 {
    display: grid;
    grid-template-columns: repeat(3, 300px);
    grid-template-rows: repeat(2, 300px);
}
.grid-3 .box:nth-child(2) {
    grid-row-start: 1;
    grid-row-end: 2;
    grid-row: 1 / 2;
}

/** 4. Span **/
/*
 * Usando 'grid-column' y 'grid-row', podemos hacer que un elemento ocupe múltiples celdas.
 * 'grid-column: 2 / 4' hace que el elemento ocupe desde la línea 2 hasta la 4 (2 columnas).
 * 'grid-row: 1 / 3' hace que el elemento ocupe desde la línea 1 hasta la 3 (2 filas).
 */
.grid-4 {
    display: grid;
    grid-template-rows: repeat(3, 300px);
    grid-template-columns: repeat(3, 300px);
}
.grid-4 .box:nth-child(2) {
    background-color: cornflowerblue;
    grid-column: 2/ 4;
    grid-row: 1 / 3;
}

/** 5. Grid Shorthand **/
/*
 * 'grid' es una propiedad abreviada que combina 'grid-template-rows' y 'grid-template-columns'.
 * La sintaxis es: grid: <grid-template-rows> / <grid-template-columns>
 * Esto crea 2 filas de 300px y 3 columnas de 300px.
 */
.grid-5 {
    display: grid;
    grid-template-rows: repeat(2, 300px);
    grid-template-columns: repeat(3, 300px);
    grid: repeat(2, 300px) / repeat(3, 300px);
}

/** 6. Grid Auto Flow **/
/*
 * 'grid-auto-flow: dense' intenta llenar los huecos en la cuadrícula, colocando elementos más pequeños
 * en espacios que de otra manera quedarían vacíos.
 */
.grid-6 {
    display: grid;
    grid: repeat(2, 300px) / repeat(3, 300px);
    grid-auto-flow: dense;
}
.grid-6 .box:nth-child(2) {
    grid-column: 1 / 2;
}

/** 7. Grid Fr y Grid Repeat **/
/*
 * 'fr' es una unidad flexible que representa una fracción del espacio disponible.
 * 'repeat(3, 1fr)' crea 3 columnas que ocupan partes iguales del espacio disponible.
 */
.grid-7 {
    display: grid;
    grid: repeat(2, 35rem) / repeat(3, 1fr);
}

/** 8. Grid Gap **/
/*
 * 'gap' (o 'grid-gap') define el espacio entre filas y columnas.
 * 'column-gap' y 'row-gap' pueden definirse por separado.
 * 'gap: 4rem' es equivalente a 'row-gap: 4rem; column-gap: 4rem;'
 */
.grid-8 {
    display: grid;
    grid: repeat(2, 25rem) / repeat(3, 1fr);
    column-gap: 4rem;
    row-gap: 4rem;
    gap: 4rem;
}
.grid-8 .box {
    margin: 0;
}

/** 9. Grid Areas **/
/*
 * 'grid-template-areas' define áreas con nombres en la cuadrícula.
 * Cada string representa una fila, y cada palabra en la string representa una columna.
 * 'grid-area' asigna un elemento a un área nombrada.
 */
.grid-9 {
    display: grid;
    height: 120rem;
    grid-template-areas: "header header header"
                         "nav nav nav"
                         "contenido contenido sidebar"
                         "footer footer footer";
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: 2.5fr 1fr 6fr 2.5fr;
    gap: 4rem;
}
.grid-9 .box {
    margin: 0;
}
.grid-9 .box:nth-child(1) {
    grid-area: header;
}
.grid-9 .box:nth-child(2) {
    grid-area: nav;
}
.grid-9 .box:nth-child(3) {
    grid-area: contenido;
    border: #000 1px solid;
}
.grid-9 .box:nth-child(4) {
    grid-area: sidebar;
    border: #FFF 1px solid;
}
.grid-9 .box:nth-child(5) {
    grid-area: footer;
}

/** 10. Grid Template **/
/*
 * 'grid-template' es una propiedad abreviada que combina 'grid-template-areas', 
 * 'grid-template-columns', y 'grid-template-rows'.
 * Permite definir áreas, tamaños de filas, y tamaños de columnas en una sola declaración.
 */
.grid-10 {
    display: grid;
    height: 120rem;
    grid-template: "header header header" 2.5fr
                   "nav nav nav" 1fr
                   "contenido contenido sidebar" 6fr
                   "footer footer footer" 2.5fr 
                   / 1fr 1fr 1fr; 
    gap: 4rem;
}
.grid-10 .box {
    margin: 0;
}
.grid-10 .box:nth-child(1) {
    grid-area: header;
}
.grid-10 .box:nth-child(2) {
    grid-area: nav;
}
.grid-10 .box:nth-child(3) {
    grid-area: contenido;
    border: #000 1px solid;
}
.grid-10 .box:nth-child(4) {
    grid-area: sidebar;
    border: #FFF 1px solid;
}
.grid-10 .box:nth-child(5) {
    grid-area: footer;
}

/** 11. Alineación Grid **/
/*
 * 'place-content' es una propiedad abreviada que combina 'align-content' y 'justify-content'.
 * 'center' alinea el contenido tanto vertical como horizontalmente en el centro del contenedor grid.
 */
.grid-11 {
    display: grid;
    grid-template-columns: repeat(6, 1fr);
    height: 300px;
    place-content: center;
}

/** 12. Grid Autofill y Autofit **/
/*
 * 'auto-fill' y 'auto-fit' son keywords que se usan con 'repeat()' para crear columnas flexibles.
 * 'auto-fill': Crea tantas columnas como quepan, incluso si están vacías.
 * 'auto-fit': Crea tantas columnas como sean necesarias para el contenido, expandiéndolas para llenar el espacio.
 * 'minmax(300px, 1fr)': Cada columna tendrá mínimo 300px y máximo 1fr de ancho.
 */
.grid-12 {
    display: grid;
    grid-template-columns: repeat(auto-fill, 200px);
    grid-template-columns: repeat(auto-fit, 200px);
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
}